name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-modules'

jobs:
  # Job 1: Code Quality & Security
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run type-check
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Check for outdated dependencies
        run: npm outdated
        continue-on-error: true

  # Job 2: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --coverage --reporter=verbose
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          
      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // This would read test results and comment on PR
            // For now, we'll just add a simple comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Tests completed successfully!'
            });

  # Job 3: Build & Package
  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Verify build output
        run: |
          echo "Checking build output..."
          ls -la dist/
          echo "Checking manifest.json..."
          cat dist/manifest.json
          echo "Checking if all required files exist..."
          test -f dist/manifest.json || exit 1
          test -d dist/assets || exit 1
          test -f dist/service-worker-loader.js || exit 1
          
      - name: Package extension
        run: npm run pack
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build-${{ github.sha }}
          path: |
            dist/
            artifacts/
          retention-days: 30
          
      - name: Upload extension package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: extension-package-${{ github.sha }}
          path: artifacts/*.zip
          retention-days: 90

  # Job 4: Performance & Bundle Analysis
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for analysis
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          echo "Bundle Size Analysis:"
          echo "====================="
          find dist -name "*.js" -exec wc -c {} + | sort -n
          echo ""
          echo "Total bundle size:"
          du -sh dist/
          echo ""
          echo "Asset breakdown:"
          ls -lah dist/assets/
          
      - name: Check bundle size limits
        run: |
          # Check if main bundle is under 500KB
          MAIN_BUNDLE_SIZE=$(find dist/assets -name "index-*.js" -exec wc -c {} + | awk '{print $1}')
          echo "Main bundle size: $MAIN_BUNDLE_SIZE bytes"
          if [ "$MAIN_BUNDLE_SIZE" -gt 512000 ]; then
            echo "‚ùå Main bundle size exceeds 500KB limit"
            exit 1
          else
            echo "‚úÖ Main bundle size is within limits"
          fi

  # Job 5: Extension Validation (Chrome Web Store format)
  validate-extension:
    name: Validate Extension
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build extension
        run: npm run build
        
      - name: Validate manifest
        run: |
          echo "Validating manifest.json..."
          node -e "
            const manifest = require('./dist/manifest.json');
            console.log('‚úÖ Manifest version:', manifest.manifest_version);
            console.log('‚úÖ Extension name:', manifest.name);
            console.log('‚úÖ Extension version:', manifest.version);
            
            // Check required fields
            if (!manifest.name || !manifest.version || !manifest.description) {
              console.error('‚ùå Missing required manifest fields');
              process.exit(1);
            }
            
            // Check permissions
            if (!manifest.permissions || !Array.isArray(manifest.permissions)) {
              console.error('‚ùå Invalid permissions field');
              process.exit(1);
            }
            
            console.log('‚úÖ Manifest validation passed');
          "
          
      - name: Check file structure
        run: |
          echo "Checking extension file structure..."
          
          # Check required files exist
          required_files=(
            "dist/manifest.json"
            "dist/service-worker-loader.js"
            "dist/assets/icon-16.png"
            "dist/assets/icon-48.png"
            "dist/assets/icon-128.png"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file is missing"
              exit 1
            fi
          done
          
          echo "‚úÖ All required files present"

  # Job 6: Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build, performance, validate-extension]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-build-${{ github.sha }}
          path: ./build-output
          
      - name: Create release tag
        if: success()
        run: |
          # Create a release tag based on package.json version
          VERSION=$(node -p "require('./package.json').version")
          DATE=$(date +%Y%m%d)
          TAG="mvp-${VERSION}-${DATE}"
          
          echo "Creating release tag: $TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "$TAG" -m "Automated release $TAG"
          git push origin "$TAG"
          
      - name: Notify deployment
        run: |
          echo "üöÄ Extension deployed successfully!"
          echo "üì¶ Build artifacts available for download"
          echo "üè∑Ô∏è  Tagged for release" 